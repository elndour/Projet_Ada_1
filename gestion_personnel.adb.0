WITH Ada.Text_IO, Ada.Float_Text_IO, Ada.Integer_Text_IO, Gestion_Outils,ada.Directories,Ada.Characters.Handling;
use Ada.Text_IO, Ada.Float_Text_IO, Ada.Integer_Text_IO, Gestion_Outils,ada.Directories,Ada.Characters.Handling;

PACKAGE BODY Gestion_Personnel IS
   USE Fichier_Archives;
   USE Stockage_Personnel;
   Function Recherche(Nom, Prenom : T_Mot;Index : integer) RETURN Boolean IS
   tab : t_registre;
   BEGIN
      Recup_Stockage(Tab);
      FOR I IN Tab'RANGE LOOP
         IF I /= Index AND THEN Tab(I).identite.Nom = Nom AND THEN Tab(I).identite.Prenom = Prenom THEN
            RETURN True;
         END IF;
      END LOOP;
      RETURN False;
   END Recherche;
   --------------------------------------------------------------------------------------
   Function Present(Tab : T_Registre; Nom, Prenom : T_Mot) RETURN integer IS
   BEGIN
      FOR I IN Tab'RANGE LOOP
         IF Tab(I).identite.Nom = Nom AND THEN Tab(I).identite.Prenom = Prenom THEN
            RETURN I;
         END IF;
      END LOOP;
      return -1;
   END Present;
   -------------------------------------------------------------------------------------------
   Procedure Supprimer(Tab : in out T_Registre; Nom, Prenom : in T_Mot; a:integer; ok: out boolean) IS
   BEGIN
      FOR I IN Tab'RANGE LOOP
         IF i= a THEN
            Tab(I).Identite.Nom :=(OTHERS=>' ');
            Tab(I).Identite.Prenom :=(OTHERS=>' ');
            Tab(I).Vide := True;
            ok := True;
         END IF;
      END LOOP;
   END Supprimer;
   -------------------------------------------------------------------------------
   PROCEDURE Archiver(Employer : IN OUT T_Registre; nom,prenom: in T_mot) IS
      Mon_Fichier : Fichier_Archives.File_Type;
      k : integer;
      begin
      IF exists("Archive_Personnel") THEN
         Open(Mon_Fichier, APPEND_File,"Archive_Personnel");
      ELSE
         Create(Mon_Fichier, Name =>"Archive_Personnel");
      END IF;
      k:= Present(Employer, Nom, Prenom);
          if k/=-1 then
               Write(Mon_Fichier, employer(k));
         ELSE
            put("L'employer archiver est introuvable");
          END IF;
      Close (Mon_Fichier);
   END Archiver;
  ---------------------------------------------------------------------------------
   PROCEDURE Check_Archive IS
      Mon_Fichier : Fichier_Archives.File_Type;
      personne : T_personne;
      begin
      IF exists("Archive_Personnel") THEN
            Open(Mon_Fichier, In_File,"Archive_Personnel");
            WHILE not End_Of_File(Mon_Fichier) LOOP
               Read(Mon_Fichier, Personne);
               put("Employer archiver:");
               Put(personne.identite.Nom);
               Put(personne.identite.Prenom); New_Line;
            END LOOP;
            Close (Mon_Fichier);
      ELSE
         put("Le fichier n'existe pas");
      END IF;
   END Check_Archive;
    -------------------------------------------------------------------------------------
   Function Cherche_Doublon_Archive(ident : T_identite) return boolean IS
      Mon_Fichier : Fichier_Archives.File_Type;
      personne : T_personne;
      begin
      IF exists("Archive_Personnel") THEN
            Open(Mon_Fichier, In_File,"Archive_Personnel");
            WHILE not End_Of_File(Mon_Fichier) LOOP
               Read(Mon_Fichier, Personne);
               IF Personne.Identite = Ident THEN
                  Close (Mon_Fichier);
                  RETURN True;
               END IF;
            END LOOP;
            Close (Mon_Fichier);
            return false;
      ELSE
         return false;
      END IF;
   END Cherche_Doublon_Archive;
   -------------------------------------------------------------------------------
   PROCEDURE Enregistrement(T : IN OUT T_Registre) IS
      Doublon, doublon_archive : Boolean;
      K : Integer;
   BEGIN
      FOR I IN T'RANGE LOOP
         Put("Employer"); Put(I); New_Line;
         T(I).Identite.Nom := (others => ' ');
         T(I).Identite.Prenom := (others => ' ');
         Put_line("Donner le nom");
         Get_Line(T(I).identite.Nom, K);
         Put_line("Donner le prenom");
         Get_Line(T(I).identite.Prenom, K);
         Doublon := Recherche(T(I).Identite.Nom,T(I).Identite.Prenom, I);
         doublon_archive := Cherche_Doublon_Archive(t(i).identite);
         IF Doublon or else Doublon_Archive then
            LOOP
               Put_Line("On a un doublon, Donner un autre identifiant");
               T(I).identite.Nom := (others => ' ');
               T(I).identite.Prenom := (others => ' ');
               Put_Line("Donner le nom");
               Get_Line(T(I).identite.Nom,K);
               Put_Line("Donner le prenom");
               Get_Line(T(I).identite.Prenom,K) ;
               Doublon := Recherche(T(I).Identite.Nom,T(I).Identite.Prenom, I);
               doublon_archive := Cherche_Doublon_Archive(t(i).identite);
            EXIT WHEN NOT Doublon and then not doublon_archive;
            END LOOP;
         END IF;
         Put_line("Donner la fonction");
         Get_Line(S,K);
         --S := to_lower(S(1..K));
         T(I).Fonction := T_Fonction'Value(S(1..K));
         T(I).Identifiant := T(I).Identifiant + 1;
         T(i).vide := False;
      END LOOP;
      Stokage_Personnel(T);
   END Enregistrement;
   ------------------------------------------------------------------------------
   PROCEDURE Enregistrer_Depart IS
      T: t_registre;
      X,K : Integer;
      Nom, Prenom : T_Mot:=(others=>' ');
      reussi : Boolean:=false;
   BEGIN
      Recup_Stockage(T);
      Put_Line("Donner le nom et le prenom de la personne a supprimer");
      Get_Line(Nom, K);Get_Line(Prenom, K);
      X := Present(T, Nom,Prenom);
      IF X /= -1 THEN
         Archiver(T,nom, prenom);
         Supprimer(T, Nom, Prenom, X, Reussi);
         IF Reussi THEN
            Put_Line("La personne a ete supprimer avec succes");
         ELSE
            Put_Line("Erreur : la suppression a echoue.");
         END IF;

      ELSE
         Put("Cette personne n'existe pas dans le registre");new_line;
      END IF;
   -- Check_Archive;
   END Enregistrer_Depart;
   -------------------------------------------------------------------------------------
   PROCEDURE Stokage_Personnel(Tab:IN OUT T_Registre)is
      Fichier_stockage : Stockage_Personnel.File_Type;
   begin
      IF exists("Stockage_Personnel") THEN
         Open(Fichier_stockage, out_File,"Stockage_Personnel");
      ELSE
         Create(Fichier_stockage, Name =>"Stockage_Personnel");
      END IF;
      Write(Fichier_stockage, tab);
      Close (Fichier_stockage);
   END Stokage_Personnel;
   ----------------------------------------------------------------------------------------
   PROCEDURE Recup_Stockage(Tab: in OUT T_Registre) IS
      Fichier_stockage : Stockage_Personnel.File_Type;
   begin
      IF exists("Stockage_Personnel") THEN
         Open(Fichier_stockage, in_File,"Stockage_Personnel");
         WHILE not End_Of_File(Fichier_stockage) LOOP
            read(Fichier_stockage, Tab);
         END LOOP;
         Close (Fichier_Stockage);
      END IF;
   END Recup_Stockage;
   ----------------------------------------------------------------------------
   PROCEDURE Enregistrer_Nouveau_Membre(Tab: IN OUT T_Registre) is
      Id: T_Identite;
      Doublon, Doublon_Archive: Boolean;
      num1 : Boolean := true;
      K : Integer;
      M:Integer:=0;
      Fonction : T_Fonction;
      trouver : boolean := false;
   BEGIN
      --FOR I IN Tab'RANGE LOOP
         --IF not Tab(I).Vide THEN
         --   Num1 := False;
         --END IF;
     -- END LOOP;
     -- if num1 then
      Id.Nom := (others => ' ');
      Id.Prenom := (others => ' ');
      Put_line("Donner le nom");
      Get_Line(id.Nom, K);
      Put_line("Donner le prenom");
      Get_Line(id.Prenom, K);
      Doublon := Recherche(Id.Nom,id.Prenom, m);
      doublon_archive := Cherche_Doublon_Archive(id);
      IF Doublon or else Doublon_Archive then
         LOOP
            Put_Line("On a un doublon, Donner un autre identifiant");
            id.Nom := (others => ' ');
            id.Prenom := (others => ' ');
            Put_Line("Donner le nom");
            Get_Line(id.Nom,K);
            Put_Line("Donner le prenom");
            Get_Line(id.Prenom,K) ;
            Doublon := Recherche(id.Nom,id.Prenom, m);
            doublon_archive := Cherche_Doublon_Archive(id);
         EXIT WHEN NOT Doublon and then not doublon_archive;
         END LOOP;
      END IF;
      Put_line("Donner la fonction");
      Get_Line(S,K);
      --S := to_lower(S(1..K));
      Fonction := T_Fonction'Value(S(1..K));
      FOR I IN Tab'RANGE LOOP
         IF Tab(I).Vide THEN
            trouver := true;
            Tab(I).Identite.Nom :=Id.Nom;
            Tab(I).Identite.Prenom :=Id.Prenom;
            Tab(I).Fonction := Fonction;
            FOR I IN Tab'RANGE LOOP
               IF NOT Tab(I).Vide THEN
                  Tab(I).identifiant := Tab(I).identifiant + 1;
               END IF;
            END LOOP;
            tab(i).identifiant := tab(i).identifiant +1;
            Tab(I).Vide := False; EXIT;
         END IF;
      END LOOP;
      if not trouver then
         Put("Le registre du personnel est plein, il ya plus de place");
      ELSE
         Put_Line("enregistrement reeussi");
      END IF;
      ELSE
      Stokage_Personnel(tab);
   END Enregistrer_Nouveau_Membre;
   ---------------------------------------------------------------------------------------
   PROCEDURE Affiche_Analyste IS
      T : T_registre;
   BEGIN
      Recup_Stockage(T);
      FOR I IN T'RANGE LOOP
         if not t(i).vide and t(i).fonction = ANALYSTE then
            Put(T(I).Identite.Nom); Put(' '); Put(T(I).Identite.Prenom); New_Line;
         END IF;
      END LOOP;
   END Affiche_Analyste;
   ---------------------------------------------------------------------------------------
   PROCEDURE Affiche_Preleveur IS
      T : T_registre;
   BEGIN
      Recup_Stockage(T);
      FOR I IN T'RANGE LOOP
         if not t(i).vide and t(i).fonction = PRELEVEUR then
            Put(T(I).Identite.Nom); Put(' '); Put(T(I).Identite.Prenom); New_Line;
         END IF;
      END LOOP;
   END Affiche_Preleveur;
   ---------------------------------------------------------------------------------------
   PROCEDURE Liste_Personnel IS
      T : T_registre;
   BEGIN
      Recup_Stockage(T);
      FOR I IN T'RANGE LOOP
         if not t(i).vide then
            Put(T(I).Identite.Nom); Put(' '); Put(T(I).Identite.Prenom); New_Line;
         END IF;
      END LOOP;
   END Liste_Personnel;
   PROCEDURE Affiche(T: IN T_Registre) IS
      begin
      FOR I IN T'RANGE LOOP
        Put(T(I).Identite.Nom); Put(' '); Put(T(I).Identite.Prenom); New_Line;
      END LOOP;
   END Affiche;

END Gestion_Personnel;





